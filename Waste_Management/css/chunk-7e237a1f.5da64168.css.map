{"version":3,"sources":["webpack:///src/router/views/pages/inview/E:/Current Projects/waste_mgmt_ui/src/router/views/pages/inview/src/router/views/pages/inview/renewalcustomer.vue","chunk-7e237a1f.5da64168.css"],"names":[],"mappings":"AAwdA,iCACA,WAAA,CACA,WAAA,CACA,qBAAA,CACA,wBAAA,CACA,YAAA,CACA,iBCtdA,CDwdA,uCACA,UAAA,CACA,kBCtdA,CDwdA,mCACA,aAAA,CACA,eAAA,CACA,UAAA,CACA,UAAA,CACA,cCtdA,CDwdA,mCACA,gBAAA,CACA,kBCtdA,CDwdA,sCACA,UAAA,CACA,eCtdA,CDwdA,qCACA,UCtdA,CDwdA,uBACA,oBAAA,CACA,iBAAA,CACA,iBAAA,CAEA,UAAA,CACA,eCtdA","file":"chunk-7e237a1f.5da64168.css","sourcesContent":["<template>\n  <div>\n    <div class=\"playvod-pages\" style=\"background-color:rgba(0, 0, 0, 0.8)\">\n      <div class=\"overlay\"></div>\n      <div class=\"container\">\n        <div class=\"row\" style=\"margin-left:250px\">\n          <div class=\"vod-right-form\">\n            <div class=\"row\">\n              <div class=\"col-md-12 mb-0\">\n                <fieldset class=\"p-2\">\n                  <legend class=\"w-auto text-center\">\n                    <h3 class=\"mt-0 mb-1\" style=\"color:#fff;\">Online Payment</h3>\n                  </legend>\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <div class=\"form-group mt-3 mt-sm-0\">\n                        <form ref=\"form\" class=\"form\">\n                          <div class=\"from-group\">\n                            <label>Unique ID Number</label>\n                            <input\n                              v-model=\"query\"\n                              class=\"form-control\"\n                              placeholder=\"Enter Stb Number\"\n                              type=\"text\"\n                              @input=\"myFunction\"\n                            />\n                            <label id=\"lFirst\">First Name</label>\n                            <input\n                              :value=\"form.firstName\"\n                              class=\"form-control\"\n                              placeholder=\"Enter First Name\"\n                              type=\"text\"\n                              disabled\n                            />\n                            <label id=\"llast\">Last Name</label>\n                            <input\n                              :value=\"form.lastName\"\n                              class=\"form-control\"\n                              placeholder=\"Enter Last Name\"\n                              type=\"text\"\n                              disabled\n                            />\n                            <label id=\"lemail\">Email</label>\n                            <input\n                              v-model=\"form.email\"\n                              placeholder=\"Enter Email\"\n                              class=\"form-control\"\n                              disabled\n                            />\n                            <label id=\"lphone\">Phone</label>\n                            <input\n                              :value=\"form.number\"\n                              placeholder=\"Enter Phone Number\"\n                              class=\"form-control\"\n                              disabled\n                            />\n\n                            <label id=\"laddress\">Address</label>\n                            <input\n                              :value=\"form.address\"\n                              class=\"form-control\"\n                              type=\"text\"\n                              placeholder=\"Enter Address\"\n                              disabled\n                            />\n\n                            <label id=\"lamt\">Price</label>\n                            <input\n                              :value=\"form.price\"\n                              class=\"form-control\"\n                              placeholder=\"Enter Price\"\n                              type=\"text\"\n                              disabled\n                            />\n                            <label>Payment Type</label>\n                            <multiselect\n                              v-model.trim=\"paymentTypeSelected\"\n                              style=\"margin-top:30px\"\n                              placeholder=\"Select Payment Type\"\n                              :options=\"paymentType\"\n                              label=\"value\"\n                            ></multiselect>\n                            <div v-if=\"paymentTypeSelected.value !== 'Online'\">\n                              <label id=\"lvoucher\">Voucher Code</label>\n                              <input\n                                v-model.trim=\"form.voucherCode\"\n                                class=\"form-control\"\n                                placeholder=\"Enter Voucher Code\"\n                                type=\"text\"\n                              />\n                            </div>\n                          </div>\n\n                          <b-form-group id=\"button-group\" class=\"mt-4 mb-1\">\n                            <b-button\n                              v-if=\"paymentTypeSelected.value !== 'Online'\"\n                              style=\"background-color:white;color:black\"\n                              @click=\"makeTopUp\"\n                            >Make TopUp</b-button>\n                            <b-button\n                              v-else\n                              style=\"background-color:white;color:black\"\n                              @click=\"makePaymentTopUp\"\n                            >Make Payment</b-button>\n                          </b-form-group>\n                        </form>\n                      </div>\n                    </div>\n                  </div>\n                </fieldset>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div :style=\"{ height: 0, overflow: 'hidden' }\">\n    \n      <Rave\n        :email=\"customers.email\"\n        :amount=\"parseInt(paymentPayload.money)\"\n        :reference=\"paymentPayload.reference\"\n        :rave-key=\"paymentPayload.key\"\n        :callback=\"callback\"\n        :redirect-url=\"paymentPayload.redirect\"\n        :customer-firstname=\"customers.firstname\"\n        :customer-lastname=\"customers.lastname\"\n        :custom-title=\"customers.displayName\"\n        :close=\"close\"\n       payment-options= \"card,ussd,qr,barter\"\n\n        :hosted-payment=\"paymentPayload.hostedPayment\"\n        currency=\"NGN\"\n      >\n        <i id=\"pay\">Pay</i>\n      </Rave>\n    </div>\n  </div>\n</template>\n<script>\nimport appConfig from '@src/app.config'\nimport Multiselect from 'vue-multiselect'\nimport moment from 'moment'\nimport NProgress from 'nprogress/nprogress'\nimport Rave from 'vue-ravepayment'\nimport { setAuthorizationHeader } from '../../../../services/index'\nimport backgroundUrl from '@assets/images/header-bg.jpg'\nimport {\n  searchCustomer,\n  searchCustomerId,\n  orderByClient,\n  transaction,\n  movieItemDetails,\n  movieList,\n  topUp,\n  makeOnlinePayment,\n} from '../../../../services/customer'\n\nexport default {\n  page: {\n    title: 'Customer',\n    meta: [{ name: 'description', content: appConfig.description }],\n  },\n  components: { Multiselect, Rave },\n  data() {\n    return {\n      backgroundUrl,\n      selectedMovieItem: {\n        contentProviderValue: 'Content-1',\n        mediaCategory: 'Movie',\n        mediaId: 2,\n        mediaTitle: 'Catch.ER',\n        moviePrice: 0,\n        releaseDate: Array[3],\n        status: 'ACTIVE',\n      },\n      topUpModalItem: {\n        id: 0,\n        price: 0,\n      },\n      paymentPayload: {\n        money: 0,\n        hostedPayment: 3,\n        key: 'FLWPUBK-5d8f2ad301c2394c332999410d0fea20-X',\n        reference: '',\n        redirect: '',\n      },\n      customer: [\n        { key: 'serial_no', value: 'STB No' },\n        { key: 'account_no', value: 'Customer Id' },\n      ],\n      paymentType: [\n        { key: 'online', value: 'Online' },\n        { key: 'voucher', value: 'Voucher' },\n      ],\n      paymentAmount: 0,\n      paymentTypeSelected: { key: 'online', value: 'Online' },\n      query: '', // BOOX0009\n      customerBy: { key: 'serial_no', value: 'STB No' },\n      title: 'Customer',\n      items: [\n        {\n          text: 'Home',\n          href: '/',\n        },\n        {\n          text: 'Customer',\n          active: true,\n        },\n      ],\n      form: {\n        title: '',\n        firstName: '',\n        middleName: '',\n        lastName: '',\n        gender: '',\n        email: '',\n        number: '',\n        address: '',\n        city: '',\n        state: '',\n        country: '',\n        postCode: '',\n        stbNumber: '',\n        planName: '',\n        expiryDate: '',\n        planAmount: '',\n        voucherCode: '',\n        movieList: '',\n        movieAmount: '',\n        voucherId: '',\n        accountNo: '',\n        movieListValue: '',\n      },\n      titles: ['Mr.', 'Sri.', 'Mrs'],\n      genderOpt: ['Male', 'Female', 'Other'],\n      bouquetsOpt: ['DAFT', 'BASE'],\n      movieLists: [],\n      totalRows: 1,\n      currentPage: 1,\n      perPage: 10,\n      pageOptions: [10, 25, 50, 100],\n      filter: null,\n      filterOn: [],\n      sortBy: 'age',\n      sortDesc: false,\n      fields: [\n        { key: 'transDate', sortable: true },\n        { key: 'transactionType', sortable: true },\n        { key: 'referenceNO', sortable: true },\n        { key: 'amount', sortable: true },\n      ],\n      movieFields: [\n        { key: 'chargeCode', sortable: true },\n        { key: 'eventName', sortable: true },\n        { key: 'eventPrice', sortable: true },\n        { key: 'bookedDate', sortable: true },\n        { key: 'status', sortable: true },\n      ],\n      tableData: [],\n      movieTableData: [],\n      topUp: false,\n      moviePurches: false,\n      show: false,\n      customers: {\n        email: 'eb@gmail.com',\n      },\n      clientId: null,\n    }\n  },\n  computed: {\n    getUserDetails() {\n      return this.$store.getters['auth/loggedInDetails']\n    },\n    rows() {\n      return this.tableData.length\n    },\n  },\n  async mounted() {\n    setAuthorizationHeader('QWRtaW46VHN0djIwMTkh')\n    this.totalRows = this.items.length\n    console.log('mounted')\n  },\n  methods: {\n    callback(response) {\n      console.log(response)\n    },\n    close() {\n      console.log('Payment closed')\n    },\n    onFiltered(filteredItems) {\n      // Trigger pagination to update the number of buttons/pages due to filtering\n      this.totalRows = filteredItems.length\n      this.currentPage = 1\n    },\n    async myFunction() {\n      if (this.query.length === 18) {\n      try {\n        setAuthorizationHeader('QWRtaW46VHN0djIwMTkh')\n        NProgress.start()\n        const result = await searchCustomer(this.customerBy.key, this.query)\n        this.clientId = result.data.id\n        if (result) {\n          const response = await searchCustomerId(result.data.id)\n          await orderByClient(\n            response.data.orderData[0].planType,\n            result.data.id\n          )\n          this.customers = response.data\n          this.pwMovieList()\n          this.show = true\n          this.form = {\n            title: this.customers.title,\n            firstName: this.customers.firstname,\n            // middleName: this.customers.firstname,\n            lastName: this.customers.lastname,\n            // gender: this.customers.gender,\n            price: this.customers.orderData[0].price,\n            id: this.customers.orderData[0].id,\n            email: this.customers.email,\n            number: this.customers.phone,\n            address: this.customers.address,\n            city: this.customers.city,\n            state: this.customers.state,\n            country: this.customers.country,\n            postCode: this.customers.zip,\n            stbNumber: this.customers.hwSerialNumber,\n            planName: this.customers.orderData[0].planDescription,\n            expiryDate: this.getDate(this.customers.orderData[0].endDate),\n            planAmount: this.customers.planamount,\n            accountNo: this.customers.accountNo,\n          }\n        }\n      \n        this.getTransaction()\n        this.getMovie()\n        NProgress.done()\n      } catch (e) {\n        \n        this.$notify({\n          group: 'alert',\n          type: 'error',\n          text: `Box Id Not Found Please Register `,\n          duration: 5000,\n        })\n        NProgress.done()\n      }\n      }\n    },\n    getDate(timeStamp) {\n      let date\n      if (timeStamp !== undefined)\n        date = timeStamp[0] + '-' + timeStamp[1] + '-' + timeStamp[2]\n      return moment(date).format('DD MMMM YYYY')\n    },\n    getFormattedDate(timeStamp) {\n      //  console.log(timeStamp)\n      let date\n      if (timeStamp !== undefined)\n        date = timeStamp[0] + '-' + timeStamp[1] + '-' + timeStamp[2]\n      return moment(date).format('MMM Do YYYY')\n    },\n    // getDate(timeStamp) {\n    //   return moment(timeStamp).format('l')\n    // },\n    // getFormattedDate(timeStamp) {\n    //   return moment(timeStamp).format('DD MMMM YYYY')\n    // },\n    async getTransaction() {\n      try {\n        const response = await transaction(this.clientId)\n        this.tableData = response.data.pageItems\n      } catch (e) {\n        this.tableData = []\n        this.$notify({\n          group: 'alert',\n          type: 'error',\n          text: `${e.message.defaultUserMessage}`,\n          duration: 5000,\n        })\n      }\n    },\n    async getMovie() {\n      try {\n        const response = await movieList(this.clientId)\n        this.movieTableData = response.data\n      } catch (e) {\n        this.movieTableData = []\n        this.$notify({\n          group: 'alert',\n          type: 'error',\n          text: `${e.message.defaultUserMessage}`,\n          duration: 5000,\n        })\n      }\n    },\n    async movieChanges(value) {\n      this.form.movieListValue = value.mediaId\n    },\n    async pwMovieList() {\n      const res = await movieItemDetails()\n      this.movieLists = res.data\n    },\n    updateValue(value) {\n      this.customerBy = value\n    },\n    topUpModal(item) {\n      this.topUpModalItem = item\n      this.topUp = true\n    },\n    async makeTopUp() {\n      try {\n        const payload = {\n          stbNo: this.form.stbNumber,\n          amount: '1000',\n          itemName: 'RC',\n          paymentDetails: {\n            paymentType: 'voucherPayment',\n            voucherId: this.form.voucherCode,\n          },\n          \n        }\n        const result = await topUp(this.customers.orderData[0].id, payload)\n        if (result) {\n          this.form = {}\n          this.query = ''\n          this.$swal({\n            group: 'alert',\n            type: 'success',\n            text: ` TopUP Created Successfully`,\n            duration: 5000,\n          })\n        }\n      } catch (e) {\n        this.form = {}\n        this.query = ''\n        this.$notify({\n          group: 'alert',\n          type: 'error',\n          text: `${e.message.errors[0].developerMessage}`,\n          duration: 5000,\n        })\n      }\n    },\n    async makePaymentTopUp() {\n      const payload = {\n        clientId: this.clientId,\n        amount: this.form.price,\n        purchaseType: 'topup',\n        stbNo: this.form.stbNumber,\n        refId: this.form.id,\n      }\n\n      this.paymentPayload.money = this.form.price\n      const result = await makeOnlinePayment(payload)\n      const txId = result.data.details.map.txid\n      console.log('oid', txId)\n      // debugger\n      if (txId) {\n        this.paymentPayload.reference = txId\n        this.paymentPayload.redirect = result.data.details.map.callbackUrl\n        const elem = document.getElementById('pay')\n        setTimeout(() => {\n          elem.click()\n        }, 1000)\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\n.vod-right-form {\n  width: 500px;\n  margin: 50px;\n  background-color: #cc0000;\n  border: 1px solid #4b5263;\n  padding: 30px;\n  text-align: center;\n}\n.vod-right-form label {\n  color: #fff;\n  margin-right: 250px;\n}\n.make-payment-btn {\n  display: block;\n  background: #fff;\n  width: 100%;\n  color: #333;\n  font-size: 18px;\n}\n.playvod-leftside {\n  padding-top: 60px;\n  padding-right: 30px;\n}\n.playvod-leftside h1 {\n  color: #fff;\n  font-weight: bold;\n}\n.playvod-leftside p {\n  color: #fff;\n}\nlabel {\n  display: inline-block;\n  margin-bottom: 2px;\n  margin-left: 0.5rem;\n\n  color: #fff;\n  font-weight: 600;\n}\n</style>\n","\n.vod-right-form[data-v-9ffa161e] {\n  width: 500px;\n  margin: 50px;\n  background-color: #cc0000;\n  border: 1px solid #4b5263;\n  padding: 30px;\n  text-align: center;\n}\n.vod-right-form label[data-v-9ffa161e] {\n  color: #fff;\n  margin-right: 250px;\n}\n.make-payment-btn[data-v-9ffa161e] {\n  display: block;\n  background: #fff;\n  width: 100%;\n  color: #333;\n  font-size: 18px;\n}\n.playvod-leftside[data-v-9ffa161e] {\n  padding-top: 60px;\n  padding-right: 30px;\n}\n.playvod-leftside h1[data-v-9ffa161e] {\n  color: #fff;\n  font-weight: bold;\n}\n.playvod-leftside p[data-v-9ffa161e] {\n  color: #fff;\n}\nlabel[data-v-9ffa161e] {\n  display: inline-block;\n  margin-bottom: 2px;\n  margin-left: 0.5rem;\n\n  color: #fff;\n  font-weight: 600;\n}\n\n\n/*# sourceMappingURL=chunk-7e237a1f.5da64168.css.map*/"]}